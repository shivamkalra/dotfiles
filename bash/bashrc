 # Print some cows
cowsay "Testing Cow" 2> /dev/null

################################################################
# Functions                                                    #
################################################################
extract () {
    # iterate all the files that matches
    for var in $@; do
	if [ -f $var ]; then
	    filename=`basename $var`
	    foldername="${filename%.*}"
	    # folder in which file exists
	    fileder=$(realpath $(dirname $var))
	    if [ -d $foldername ]; then
		echo "Error: $foldername already exists"
		continue
	    fi
	    mkdir _tmp_ && mv $var _tmp_
	    cd _tmp_

	    case $filename in
		*.tar.bz2)   tar xvjf $filename    ;;
		*.tar.gz)    tar xvzf $filename    ;;
		*.bz2)       bunzip2 $filename     ;;
		*.rar)       unrar x $filename     ;;
		*.gz)        gunzip $filename      ;;
		*.tar)       tar xvf $filename     ;;
		*.tbz2)      tar xvjf $filename    ;;
		*.tgz)       tar xvzf $filename    ;;
		*.zip)       unzip $filename       ;;
		*.Z)         uncompress $filename  ;;
		*.7z)        7z x $filename        ;;
		*)           echo "don't know how to extract '$1'..." ;;
	    esac

	    # restoring
	    mv $filename $fileder
	    # three because we moved a file, . and extracted files
	    if [ $(find . -maxdepth 1 | wc -l) -eq 2 ]; then
		mv  -i * ../ && cd ../ && rm -rf _tmp_
	    else
		cd ../ && mv _tmp_ $foldername
	    fi
	else
	    echo "'$var' is not a valid file!"
	fi

    done
}

# zipping function
zipit () {
    if [ $# -eq 0 ]; then
	return
    fi

    cmd=""
    for var in $@; do
	cmd="$cmd $var"
    done
    zipname='output'
    if [ $# -eq 1 ]; then
	dir=$1
	zipname=`basename $dir`
	zipname="${zipname%.*}"
    fi
    zip -r $zipname.zip $cmd
}

################################################################
# Variables                                                    #
################################################################
export EDITOR=emacs
export TERMINAL=urxvt
export BROWSER=chromium
export PS1=""
export PROMPT_COMMAND='printf "\033]0;%s\007" "${PWD/#$HOME/~}"'
# Skin for MC
export MC_SKIN=$HOME/.mc/solarized.ini

################################################################
# Aliases                                                      #
################################################################
alias e="TERM=rxvt /bin/emacs -nw"
alias ls='ls -h --color=auto'
alias h='cd'
alias cim='vim'
alias back='cd $OLDPWD'
alias root='sudo su'
alias grep='grep --color=auto'
alias dfh='df -h'
alias gvim='gvim -geom 84x26'
alias start='dbus-launch startx'
alias c="clear"
alias rm="rm -i"

#git
alias git-root='cd "$(git rev-parse --show-toplevel)"'
# office
alias klick-pradaxa="ssh skalra@pradaxastaging.klick.com"

# TODO: Find better fix
# this is alias defined only for TMUX shells
# Tried adding the shortcut to tmux conf,
# but it just breaks entire trmux prefix for
# some reason. Synching tmux paste buffer with clipboard
# is import so adding this silly alias.
if [[ "$TERM" == "screen" ]]; then
    alias tclip='tmux show-buffer -- | xclip -i -selection clipboard'
fi

CLEAR="\e[0m"
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"

if [[ "$TERM" == "dumb" ]]; then
    export PS1=">>> "
else
    export PS1="\[$RED\]>>\[$GREEN\]>>\[$BLUE\]>>\[$CLEAR\] "
    if [[ "$TERM" == "eterm-color" ]]; then
	export PROMPT_COMMAND=""
    fi
fi
# Gtk themes
export GTK2_RC_FILES="$HOME/.gtkrc-2.0"

# [ ! "$UID" = "0" ] && archbey2
eval `dircolors ~/.lscolors`

if [ -f ~/.git-completion.bash ]; then
    . ~/.git-completion.bash
fi
