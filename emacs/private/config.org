#+TITLE:   Shivam's Emacs Configuration
#+AUTHOR:  Shivam Kalra
#+EMAIL:   shivam.s.kalra@gmail.com
* Configuration

** Common settings

#+BEGIN_SRC emacs-lisp
  ;; spacemac style
  (setq powerline-default-separator 'arrow-fade)
  (setq browse-url-browser-function 'browse-url-generic)
  (setq browse-url-generic-program "chromium")
#+END_SRC

*** Load secret file

Contains 3 lines proof of Fermat' last theorem

#+BEGIN_SRC emacs-lisp
  (load-library "~/secrets.el.gpg")
#+END_SRC


*** Disable recursive mini-buffers

[[https://www.reddit.com/r/emacs/comments/45lfv3/how_to_clear_the_minibuffer][Reddit Reference]]

[[https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Mini.html][GNU Manual Reference]]

#+BEGIN_SRC emacs-lisp
  (setq enable-recursive-minibuffers nil)
#+END_SRC


*** Enable fill column indicator

Add a visible indicator for a fill column.

#+BEGIN_SRC emacs-lisp
  ;; 100 columns seems more modern
  (setq fill-column 100)
  (setq-default fci-rule-column 100)
  (setq fci-rule-width 1)

  ;; good for solarized dark theme
  (setq fci-rule-color "#073642")

  ;; only programming mode
  (spacemacs/add-to-hooks 'spacemacs/toggle-fill-column-indicator-on
                          '(prog-mode-hook))
#+END_SRC

**** TODO Fix for avy-mode

[[https://github.com/abo-abo/avy/issues/135][Github Issue]]


*** Abbrev mode

Abbrev mode is amazing for texting editing.

#+BEGIN_SRC emacs-lisp
  (spacemacs/add-to-hooks 'abbrev-mode
                          '(text-mode-hook))
#+END_SRC


*** Special buffers - open in new frame

Some buffers must automatically open in new frame.

#+BEGIN_SRC emacs-lisp
  (setq special-display-buffer-names
        (append (list "ChangeLog" "*scheme*" "*igrep*" "*grep*" "*cvs*"
                      "*compilation*" '("*Help*" 50 60)
                      "*Buffer List*" "*W3-WARNINGS*" "*ielm*"
                      "*Compile-Log*" "*BBDB*" "*info*"
                      "*Calendar*"
                      "*mu4e-headers*"
                      )
                special-display-buffer-names))

  (setq special-display-regexps
        (append (list "\\*unsent*")
                special-display-regexps))
#+END_SRC


*** Smooth scrolling

#+BEGIN_SRC emacs-lisp
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-conservatively 10000)
  (setq auto-window-vscroll nil)
  (setq scroll-step 1) ;; keyboard scroll one line at a time
#+END_SRC


** Utility functions

#+BEGIN_SRC emacs-lisp
  (defun copy-file-path-to-clipboard ()
    (interactive)
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC


** Spell checking

Set the location for English dictionary.

#+BEGIN_SRC emacs-lisp
  (setq ispell-complete-word-dict (file-truename "~/.emacs.d/.cache/english-words.txt"))
#+END_SRC

*** Integration with /abbrev/
It allows the auto-correction of common spelling mistakes I make. Code is taken
from [[http://degruchy.org/2014/12/23/emacs-ispell-abbrev/]].

#+BEGIN_SRC emacs-lisp
  (defun sk/ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made.
     With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((bef (downcase (or (thing-at-point 'word) ""))) aft)
      (call-interactively 'helm-flyspell-correct)
      (setq aft (downcase (or (thing-at-point 'word) "")))
      (unless (string= aft bef)
        (message "\"%s\" now expands to \"%s\" %sally"
                 bef aft (if p "loc" "glob"))
        (define-abbrev
          (if p local-abbrev-table global-abbrev-table)
          bef aft))))

  (setq save-abbrevs t)
#+END_SRC

Override the ~<SPC Sc>~ binding to above function and enable abbrev mode in text
modes.

#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys "Sc" 'sk/ispell-word-then-abbrev)
#+END_SRC

**** TODO Create advice to helm-flyspell-correct instead

Instead of overriding ~<SPC Sc>~ binding, I should create advice to the parent
function.



** Fill/unfill region

Use ~M-q~ to fill the region.

Enable auto-fill on text modes (including ~org~, ~mu4e-compose~ and etc)

#+BEGIN_SRC emacs-lisp
  ;; this should work 
  (spacemacs/add-to-hooks 'spacemacs/toggle-auto-fill-mode-on
                          '(text-mode-hook))
#+END_SRC

*Unfill Region:* Use ~M-Q~ to unfill the region. Reference:
[[https://www.emacswiki.org/emacs/UnfillRegion]]

#+BEGIN_SRC emacs-lisp
  (defun unfill-region (beg end)
    "Unfill the region, joining text paragraphs into a single
      logical line.  This is useful, e.g., for use with
      `visual-line-mode'."
    (interactive "*r")
    (let ((fill-column (point-max)))
      (fill-region beg end)))

  ;; Handy key definition
  (define-key text-mode-map (kbd "M-Q") 'unfill-region)
#+END_SRC


** ERC settings

Enable spelling check in ERC.

#+BEGIN_SRC emacs-lisp
  (erc-spelling-mode 1)
#+END_SRC

Use ~erc-connect()~ to join all the ERC channels that I care about.

#+BEGIN_SRC emacs-lisp
  ;; add channels to automatically join
  (setq erc-autojoin-channels-alist
        '(("gitter.im"   "#syl20bnr/spacemacs")
          ("freenode.net" "#emacs" "#archlinux")
          ("oftc.net" "#awesome")))

  (setq erc-prompt-for-nickserv-password nil)

  ;; call this function to connect to ERC
  (defun erc-connect ()
    (interactive)
    (erc :server "irc.freenode.net" :port 6667 :full-name "Shivam Kalra" :nick "skalra")
    (erc-ssl :server "irc.gitter.im" :port 6667 :full-name "Shivam Kalra" :nick "shivamkalra"
             :password irc-gitter-nick-passwd)
    (erc :server "irc.oftc.net" :port 6667 :full-name "Shivam Kalra" :nick "skalra"
         :password irc-oftc-nick-passwd))


  ;; Add nick server password based on server, it should rather be a map between
  ;; username and server but for now it is not required
  (defun nickname-irc-after-connect (server nick)
    (erc-message
     "PRIVMSG"
     (concat
      "NickServ identify "
      (cond
       ((string-match "freenode\\.net" server) irc-freenode-nick-passwd)
       ((string-match "oftc\\.net" server) irc-oftc-nick-passwd)
       ((string-match "gitter\\.im" server) irc-oftc-nick-passwd)))))


  (add-hook 'erc-after-connect 'nickname-irc-after-connect)
#+END_SRC


** Wakatime settings

Quantify my coding habits

#+BEGIN_SRC emacs-lisp
  ;; wakatime global mode
  (setq wakatime-api-key wakatime-api-token)
  (setq wakatime-python-bin "/usr/bin/python")
  (setq wakatime-cli-path "/usr/bin/wakatime")
  (global-wakatime-mode t)
#+END_SRC


** Org mode

Enable ~org-indent-mode~

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode t)
#+END_SRC

Org babel languages

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC


** Mu4e email
#+BEGIN_SRC emacs-lisp

  (setq
   mu4e-get-mail-command "/usr/bin/mbsync gmail"
   mu4e-update-interval 150)

  ;; This is needed to allow msmtp to do its magic:
  (setq message-sendmail-f-is-evil t)

  ;;need to tell msmtp which account we're using
  (setq message-sendmail-extra-arguments '("--read-envelope-from"))
  (setq message-send-mail-function 'message-send-mail-with-sendmail)
  (setq sendmail-program "/usr/bin/msmtp")

  (setq mu4e-maildir-shortcuts
        '(("/school/masc"     . ?m)
          ("/personal/inbox"   . ?i)
          ("/school/uwmail"   . ?w)
          ("/personal/family"       . ?f)
          ("/personal/archive"       . ?a)
          ("/personal/sent" . ?s)))
 #+END_SRC
